function [ B ] = part3
%PART3 Summary of this function goes here
%   Detailed explanation goes here
img = zeros(7, 7);
img(3:5, 3:5)=1;

close all;
clc;
% figure;
% imshow(img);

[row,col]=size(img);

B =[];
for i = row-1 : -1: 2
    for j = 2 : col-1
        if img(i,j)
            s = [i j];
            B = [B; s];
            % this is probably wrong
            backtrack = [i j-1];
            % Moore is a 8 x 2 matrix (x,y)
            Moore = neighborhood(s(1), s(2), );
            % this is the next clockwise pixel after backtracking
            c = Moore(1,:);
            while ~isequal(c,s) 
                if img(c(1), c(2)) && isempty(find(ismember(B, c, 'rows'),1))
                    B = [B; c(1) c(2)];
                    Moore = neighborhood(c(1), c(2));
                    c = backtrack;
                else
                    Moore = circshift(Moore, [-1 2]);
                    c = Moore(1,:);
                end
            end
        end
    end
end

val = zeros(row,col);
for i= 1: length(B)
    val(B(i,1),B(i,2))=1;
end
figure;
imshow(val);

display(B);

function M_coordinates_value = neighborhood(x,y)    
    % we march towards south and then west and then north and then east. 
    % M_coordinates_value stores the coordinates values
    M_coordinates_value= [x+1 y; x+1 y-1 ; x y-1 ; x-1 y-1 ; x-1 y ; x-1 y+1 ; x y+1 ; x+1 y+1 ];    
end
end



if (1)
else if(1)
    else if(1)
        end
    end
end


